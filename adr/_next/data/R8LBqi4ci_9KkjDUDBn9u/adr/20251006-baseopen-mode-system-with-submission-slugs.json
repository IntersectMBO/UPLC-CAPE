{"pageProps":{"projectName":"UPLC-CAPE","currentAdr":{"slug":"20251006-baseopen-mode-system-with-submission-slugs","package":null,"title":"Base/Open Mode System with Submission Slugs","status":"superseded","supersededBy":{"slug":"20251009-scenario-based-approach-replacing-mode-system","package":null,"title":"Scenario-Based Approach: Replacing Mode System with Dedicated Scenarios","status":"accepted","creationDate":"2025-10-09T14:44:46.000Z","publicationDate":"2025-10-09T21:59:59.000Z"},"tags":["benchmarking","submissions","evaluation-modes","compiler-comparison"],"deciders":[],"body":{"enhancedMdx":"\nTechnical Story: [Issue #59](https://github.com/IntersectMBO/UPLC-CAPE/issues/59)\n\n> **Note**: This ADR describes the base/open mode system that was implemented in PR #60 but subsequently replaced by a scenario-based approach (see superseding ADR). The mode system added unnecessary complexity; the scenario-based approach achieves the same goals more simply.\n\n## Context and Problem Statement\n\nUPLC-CAPE users have two distinct benchmarking needs that are sometimes in conflict:\n\n1. **Compiler Comparison** (Group A): Users want to compare compiler optimization effectiveness in isolation by having all submissions implement the **same algorithm**. This provides apples-to-apples comparison where performance differences reflect compiler capabilities rather than algorithmic choices.\n\n2. **Real-World Competition** (Group B): Users want submissions to showcase ecosystem capabilities using **any optimizations or algorithms** (memoization, metaprogramming, different algorithms). This reflects practical deployment strategies and compiler USPs.\n\nCurrently, the framework allows any implementation approach, but all submissions compete in a single pool. This makes it impossible to isolate compiler effectiveness from algorithmic choices, frustrating both user groups.\n\n**Question**: How can we support both pure compiler comparison and open optimization competition within the same framework?\n\n## Decision Drivers\n\n- Must satisfy both user groups without forcing them into a single evaluation mode\n- Should enable multiple optimization experiments per compiler/author\n- Must maintain backward compatibility with existing submissions\n- Should provide clear, self-documenting organization\n- Must be intuitive for new users while supporting advanced workflows\n- Should facilitate both academic research and practical developer guidance\n\n## Considered Options\n\n1. **Separate Scenario Types** - Create duplicate scenarios (e.g., \"fibonacci-constrained\" vs \"fibonacci-open\")\n2. **Implementation Tracks** - Add track/category system within scenarios\n3. **Base/Open Mode System with Slugs** - Two evaluation modes with flexible slug identifiers\n4. **Tag-Based System** - Use metadata tags for algorithmic constraints\n\n## Decision Outcome\n\nChosen option: **\"Base/Open Mode System with Slugs\"**, because it:\n\n- Provides clear semantic distinction between evaluation contexts (\"base\" = prescribed algorithm, \"open\" = any optimization)\n- Enables multiple experiments per compiler via descriptive slugs\n- Maintains single scenario definition (no duplication)\n- Scales to any number of optimization variants\n- Is backward compatible (existing submissions â†’ \"open_default\")\n- Uses familiar terminology (\"mode\" aligns with compilation contexts)\n\n### Implementation Overview\n\n**Two Evaluation Modes:**\n\n1. **\"base\" mode**: Implements exact algorithm prescribed in scenario specification\n   - One submission per compiler/author\n   - Pure compiler comparison (apples-to-apples)\n   - No slug needed\n\n2. **\"open\" mode**: Any algorithm or optimization technique allowed\n   - Multiple submissions per compiler/author\n   - Optional slugs for specific optimizations: \"memoized\", \"unrolled\", \"pfix\", etc.\n   - Slug can be omitted for generic/default implementation\n   - Real-world competition\n\n**Directory Naming:**\n\n```\nsubmissions/{scenario}/{Compiler}_{Version}_{Author}_base/\nsubmissions/{scenario}/{Compiler}_{Version}_{Author}_open/            # generic/default\nsubmissions/{scenario}/{Compiler}_{Version}_{Author}_open_{slug}/    # specific optimization\n```\n\n**Slug Philosophy:**\n\n- **Omit slug**: For generic/default open mode implementations (most common)\n- **Add slug**: Only when submitting specific optimization variants (e.g., \"memoized\", \"tail-recursive\")\n- **Benefit**: Cleaner naming, slug only adds information when needed\n\n**CLI Default Behavior:**\n\n- Omitting `--mode` shows **all modes** (most comprehensive view)\n- Explicit `--mode base` or `--mode open` filters to specific mode\n\n### Positive Consequences\n\n- Both user groups get dedicated evaluation contexts without compromise\n- Compiler authors can demonstrate both compliance (base) and innovation (open)\n- Reports clearly separate algorithmic comparison from optimization competition\n- Multiple optimization experiments trackable via descriptive slugs\n- Framework becomes more valuable for academic research AND practical guidance\n- Backward compatible: existing submissions continue working as \"open_default\"\n\n### Negative Consequences\n\n- Increased complexity in submission directory structure\n- Base mode compliance relies on community review (honor system)\n- Scenario authors must define base mode algorithm specification\n- More options for users to understand (though with good defaults)\n\n## Pros and Cons of the Options\n\n### Option 1: Separate Scenario Types\n\nCreate duplicate scenarios (e.g., \"fibonacci-constrained\" vs \"fibonacci-open\")\n\n- Good, because conceptually simple (one scenario = one evaluation mode)\n- Good, because no changes to existing submission structure\n- Bad, because duplicates scenario specifications (maintenance burden)\n- Bad, because fragments community efforts across duplicate scenarios\n- Bad, because doesn't scale to multiple optimization variants\n\n### Option 2: Implementation Tracks\n\nAdd track/category system within scenarios\n\n- Good, because keeps scenarios unified\n- Good, because supports multiple tracks per scenario\n- Bad, because \"track\" terminology less clear than \"mode\"\n- Bad, because doesn't directly convey algorithmic constraint concept\n- Bad, because requires additional slug system for variants anyway\n\n### Option 3: Base/Open Mode System with Slugs (CHOSEN)\n\nTwo evaluation modes with flexible slug system\n\n- Good, because clear semantic distinction (\"base\" = prescribed, \"open\" = free)\n- Good, because slug system enables unlimited optimization variants\n- Good, because \"mode\" terminology familiar from compilation contexts\n- Good, because backward compatible\n- Good, because self-documenting (slug describes optimization)\n- Good, because comprehensive default (omitting --mode shows all)\n- Bad, because base mode compliance relies on community review\n- Bad, because adds complexity to directory naming\n\n### Option 4: Tag-Based System\n\nUse metadata tags for algorithmic constraints\n\n- Good, because flexible tagging system\n- Good, because no directory structure changes\n- Bad, because less discoverable (hidden in metadata)\n- Bad, because tags less structured than explicit modes\n- Bad, because unclear semantics (what tags mean what?)\n- Bad, because makes filtering and reporting more complex\n\n## Implementation Details\n\n### Scenario Definition Enhancement\n\nScenarios gain optional base mode algorithm specification:\n\n```markdown\n## Base Mode Algorithm\n\nAll \"base\" mode submissions MUST implement this exact algorithm:\n\n\\`\\`\\`haskell fibonacci :: Integer -> Integer fibonacci n | n <= 1 = n | otherwise = fibonacci (n - 1) + fibonacci (n - 2) \\`\\`\\`\n\n**Requirements:**\n\n- Naive recursive implementation (no memoization)\n- No loop-based iteration\n- Direct translation of mathematical definition\n```\n\n### Metadata Schema Addition\n\n```json\n{\n  \"submission\": {\n    \"mode\": \"open\", // Required: \"base\" or \"open\"\n    \"slug\": \"memoized\", // Required for open, omitted for base\n    \"implementation_notes\": \"...\"\n  }\n}\n```\n\n### CLI Enhancements\n\n```bash\n# Create submissions\ncape submission new fibonacci Compiler 1.0 author --mode base\ncape submission new fibonacci Compiler 1.0 author --mode open --slug memoized\n\n# List submissions (default: all modes)\ncape submission list fibonacci\ncape submission list fibonacci --mode base\n\n# Generate reports (default: all modes)\ncape submission report fibonacci\ncape submission report fibonacci --mode base\n```\n\n### Verification Strategy\n\n**Base Mode**: Community review during PR process\n\n- Submission README explains algorithm compliance\n- Reviewers verify against scenario specification\n- Honor system with clear guidelines\n\n**Open Mode**: Existing correctness verification only\n\n- No algorithmic constraints\n- Slug for identification/documentation only\n\n## Applicability\n\n**Synthetic Scenarios** (fibonacci, factorial):\n\n- Both modes applicable\n- Clear algorithmic prescriptions for base mode\n- Room for optimization exploration in open mode\n\n**Real-world Scenarios** (two-party-escrow):\n\n- Typically only open mode\n- Complex validators lack clear \"base\" algorithm\n- Focus on practical deployment strategies\n\nScenarios can optionally define base mode. If undefined, only open mode available.\n\n## Links\n\n- [GitHub Issue #59](https://github.com/IntersectMBO/UPLC-CAPE/issues/59) - Full specification and implementation plan\n- Related ADR: <AdrLink slug=\"0003-use-multi-view-approach-for-benchmark-scenarios\" status=\"accepted\" title=\"Use Multi-View Approach for Benchmark Scenario Specification\" customLabel=\"Multi-View Approach for Benchmark Scenario Specification\" />\n"},"creationDate":"2025-10-06T15:04:40.000Z","lastEditDate":"2025-10-24T09:04:39.000Z","lastEditAuthor":"Yura Lazaryev","publicationDate":"2025-10-06T21:59:59.000Z","file":{"relativePath":"doc/adr/20251006-baseopen-mode-system-with-submission-slugs.md","absolutePath":"/home/runner/work/UPLC-CAPE/UPLC-CAPE/doc/adr/20251006-baseopen-mode-system-with-submission-slugs.md"},"repository":{"provider":"github","viewUrl":"https://github.com/IntersectMBO/UPLC-CAPE/blob/master/doc/adr/20251006-baseopen-mode-system-with-submission-slugs.md"}},"l4bVersion":"1.1.0"},"__N_SSG":true}