import{_ as r}from"./slidev/VSwitch-BAkXwFRc.js";import{b as a,o as m,w as u,g as l,e as p,A as n,v as d,x as c,B as o}from"./modules/vue-9Q8YSEl7.js";import{I as b}from"./slidev/center-BonTDrF8.js";import{u as g,f}from"./slidev/context-HtCIdcFs.js";import"./modules/shiki-CF7fL4qr.js";import"./index-DPo3SfWR.js";const L={__name:"slides.md__slidev_21",setup(y){const{$clicksContext:s,$frontmatter:i}=g();return s.setup(),(v,e)=>{const t=r;return m(),a(b,d(c(o(f)(o(i),20))),{default:u(()=>[e[10]||(e[10]=l("h2",null,"Creating Submissions: Step-by-Step",-1)),p(t,{unmount:!0},{0:u(()=>[...e[0]||(e[0]=[l("p",null,[l("strong",null,"The Workflow")],-1),l("ol",null,[l("li",null,[l("strong",null,"Understand the scenario"),n(" - Read spec, review test cases")]),l("li",null,[l("strong",null,"Create your project"),n(" - Separate GitHub repo or local project")]),l("li",null,[l("strong",null,"Initialize submission"),n(" - "),l("code",null,"cape submission new <scenario> <compiler> <version> <handle>")]),l("li",null,[l("strong",null,"Fill in metadata"),n(" - References to source project, compiler details")]),l("li",null,[l("strong",null,"Write README"),n(" - Examples, build instructions, optimization notes")]),l("li",null,[l("strong",null,"Include UPLC file"),n(" - "),l("code",null,"<scenario>.uplc"),n(" compiled output")]),l("li",null,[l("strong",null,"Submit PR"),n(" - For community review")])],-1)])]),1:u(()=>[...e[1]||(e[1]=[l("p",null,[l("strong",null,"1. Understand the scenario")],-1),l("ul",null,[l("li",null,[n("Read specification in "),l("code",null,"scenarios/<name>/<name>.md")]),l("li",null,[n("Review test cases in "),l("code",null,"cape-tests.json")]),l("li",null,"Understand expected behavior and edge cases")],-1)])]),2:u(()=>[...e[2]||(e[2]=[l("p",null,[l("strong",null,"2. Create a submission(s) project")],-1),l("p",null,"Sources must be publishable for analysis, reproduction, forking",-1),l("ul",null,[l("li",null,[n("Dedicated public GitHub repo "),l("ul",null,[l("li",null,[n("Example: "),l("code",null,"github.com/yourname/cape-submissions-mycompiler")]),l("li",null,[n("Sources will be "),l("strong",null,"referenced"),n(" in submission PR,"),l("br"),n(" so a stable immutable reference (commit hash) is used.")])])]),l("li",null,[n("Local project "),l("ul",null,[l("li",null,[n("Project sources should be "),l("strong",null,"included"),n(" in submission PR")])])])],-1)])]),3:u(()=>[...e[3]||(e[3]=[l("p",null,[l("strong",null,"3. Initialize submission")],-1),l("ul",null,[l("li",null,[l("code",null,"cape submission new <scenario> <compiler> <version> <handle> [variant]")]),l("li",null,[n("Creates: "),l("code",null,"submissions/<scenario>/<Compiler>_<version>_<handle>[_variant]/")])],-1)])]),4:u(()=>[...e[4]||(e[4]=[l("p",null,[l("strong",null,"4. Fill in metadata"),n(" ("),l("code",null,"metadata.json"),n(")")],-1),l("ul",null,[l("li",null,"Compiler name, version, contributor handle"),l("li",null,"Source repository URL and commit hash"),l("li",null,"Links your CAPE submission to your source project")],-1)])]),5:u(()=>[...e[5]||(e[5]=[l("p",null,[l("strong",null,"5. Write README")],-1),l("ul",null,[l("li",null,"Explain your approach, optimizations, trade-offs"),l("li",null,"Build instructions: how to reproduce the UPLC output"),l("li",null,"Help others learn from your work")],-1)])]),6:u(()=>[...e[6]||(e[6]=[l("p",null,[l("strong",null,"6. Include UPLC file")],-1),l("ul",null,[l("li",null,[n("Your compiled output: "),l("code",null,"<scenario>.uplc")]),l("li",null,"Must match the scenario name")],-1)])]),7:u(()=>[...e[7]||(e[7]=[l("p",null,[l("strong",null,"7. Submit PR")],-1),l("ul",null,[l("li",null,"Push your branch, create pull request"),l("li",null,"Community review: sources, metadata, tests"),l("li",null,"Collaborative feedback improves quality")],-1)])]),8:u(()=>[...e[8]||(e[8]=[l("p",null,[l("strong",null,"8. After merge")],-1),l("ul",null,[l("li",null,[n("GitHub Actions runs "),l("code",null,"cape submission measure")]),l("li",null,[n("Generates "),l("code",null,"metrics.json"),n(" automatically")]),l("li",null,"Updates HTML reports with your submission")],-1)])]),9:u(()=>[...e[9]||(e[9]=[l("p",null,[l("strong",null,"Common Gotcha: UPLC Names")],-1),l("ul",null,[l("li",null,[n("Named variables in UPLC source "),l("code",null,"[a-zA-Z][a-zA-Z0-9_']*")]),l("li",null,[l("strong",null,"Always test"),n(": "),l("code",null,"cape submission verify <path>"),n(" before submitting")]),l("li",null,"Catches compatibility issues early")],-1)])]),_:1})]),_:1},16)}}};export{L as default};
