import{_ as r}from"./slidev/VSwitch-SuVZ3Xod.js";import{b as a,o as m,w as u,g as l,e as p,A as e,v as d,x as c,B as s}from"./modules/vue-BXbqQv4r.js";import{I as b}from"./slidev/center-D1Mlohfb.js";import{u as f,f as g}from"./slidev/context-BbGGAmrJ.js";import"./modules/shiki-CJ1do2kA.js";import"./index-DDx1krHu.js";const j={__name:"slides.md__slidev_19",setup(y){const{$clicksContext:o,$frontmatter:i}=f();return o.setup(),(C,n)=>{const t=r;return m(),a(b,d(c(s(g)(s(i),18))),{default:u(()=>[n[9]||(n[9]=l("h2",null,"Creating Submissions: Step-by-Step",-1)),p(t,{unmount:!0},{0:u(()=>[...n[0]||(n[0]=[l("p",null,[l("strong",null,"1. Understand the scenario")],-1),l("ul",null,[l("li",null,[e("Read specification in "),l("code",null,"scenarios/<name>/<name>.md")]),l("li",null,[e("Review test cases in "),l("code",null,"cape-tests.json")]),l("li",null,"Understand expected behavior and edge cases")],-1)])]),1:u(()=>[...n[1]||(n[1]=[l("p",null,[l("strong",null,"2. Create a submission(s) project")],-1),l("p",null,"Sources must be publishable for analysis, reproduction, forking",-1),l("ul",null,[l("li",null,[e("Dedicated public GitHub repo "),l("ul",null,[l("li",null,[e("Example: "),l("code",null,"github.com/yourname/cape-submissions-mycompiler")]),l("li",null,[e("Sources will be "),l("strong",null,"referenced"),e(" in submission PR,"),l("br"),e(" so a stable immutable reference (commit hash) is used.")])])]),l("li",null,[e("Local project "),l("ul",null,[l("li",null,[e("Project sources should be "),l("strong",null,"included"),e(" in submission PR")])])])],-1)])]),2:u(()=>[...n[2]||(n[2]=[l("p",null,[l("strong",null,"3. Initialize submission")],-1),l("ul",null,[l("li",null,[l("code",null,"cape submission new <scenario> <compiler> <version> <handle> [variant]")]),l("li",null,[e("Creates: "),l("code",null,"submissions/<scenario>/<Compiler>_<version>_<handle>[_variant]/")])],-1)])]),3:u(()=>[...n[3]||(n[3]=[l("p",null,[l("strong",null,"4. Fill in metadata"),e(" ("),l("code",null,"metadata.json"),e(")")],-1),l("ul",null,[l("li",null,"Compiler name, version, contributor handle"),l("li",null,"Source repository URL and commit hash"),l("li",null,"Links your CAPE submission to your source project")],-1)])]),4:u(()=>[...n[4]||(n[4]=[l("p",null,[l("strong",null,"5. Write README")],-1),l("ul",null,[l("li",null,"Explain your approach, optimizations, trade-offs"),l("li",null,"Build instructions: how to reproduce the UPLC output"),l("li",null,"Help others learn from your work")],-1)])]),5:u(()=>[...n[5]||(n[5]=[l("p",null,[l("strong",null,"6. Include UPLC file")],-1),l("ul",null,[l("li",null,[e("Your compiled output: "),l("code",null,"<scenario>.uplc")]),l("li",null,"Must match the scenario name")],-1)])]),6:u(()=>[...n[6]||(n[6]=[l("p",null,[l("strong",null,"7. Submit PR")],-1),l("ul",null,[l("li",null,"Push your branch, create pull request"),l("li",null,"Community review: sources, metadata, tests"),l("li",null,"Collaborative feedback improves quality")],-1)])]),7:u(()=>[...n[7]||(n[7]=[l("p",null,[l("strong",null,"8. After merge")],-1),l("ul",null,[l("li",null,[e("GitHub Actions runs "),l("code",null,"cape submission measure")]),l("li",null,[e("Generates "),l("code",null,"metrics.json"),e(" automatically")]),l("li",null,"Updates HTML reports with your submission")],-1)])]),8:u(()=>[...n[8]||(n[8]=[l("p",null,[l("strong",null,"Common Gotcha: UPLC Names")],-1),l("ul",null,[l("li",null,[e("Named variables in UPLC source must match "),l("code",null,"[a-zA-Z][a-zA-Z0-9_']*")]),l("li",null,[l("strong",null,"Always test"),e(": "),l("code",null,"cape submission verify <path>"),e(" before submitting")]),l("li",null,"Catches compatibility issues early")],-1)])]),_:1})]),_:1},16)}}};export{j as default};
